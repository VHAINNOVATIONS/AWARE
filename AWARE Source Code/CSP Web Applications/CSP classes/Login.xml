<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux 5 for x86-64) 2011.1.2 (Build 701)" ts="2014-04-25 17:06:17">
<Class name="VEFA.Login">
<Description>
WOIFO/BT - VEFA AWARE COMMON AND LOGIN API CALLED BY CSP FILE ; 01/22/2014
1.0; VEFA ALRE ;**1,4**;MAY 2011;Build 1
Per VHA Directive 2004-038, this routine should not be modified.
</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63288,50144.029831</TimeChanged>
<TimeCreated>63207,57492.688288</TimeCreated>

<Method name="SaveAV">
<Description>
Encrypt Access and Verify codes and save them as session variables</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ACCESS,VERIFY</FormalSpec>
<Implementation><![CDATA[
	S %session.Data("access",1)=..Encrypt(ACCESS)
	S %session.Data("verify",1)=..Encrypt(VERIFY)
]]></Implementation>
</Method>

<Method name="LoginAlertCache">
<Description>
Authenticate Access/Verify codes, Login to VistA and fill Web Page with Alert Cache</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Q:'..GetAccessVerifyCodes()
	;
	N ACCESS S ACCESS=(%session.Data("access",1))
	S ACCESS=..Decrypt(ACCESS)
	N VERIFY S VERIFY=(%session.Data("verify",1))
	S VERIFY=..Decrypt(VERIFY)
	;	
	D ##class(VEFA.Login).Env()
	N DUZ,MSG S DUZ=$$GETDUZ^VEFACSP1(ACCESS,VERIFY,.MSG)
	;
	I 'DUZ D ..AccessError("alertcache.csp",MSG)
	I DUZ D
	. S %session.Data("login",1)=2
	. S %session.Data("username",1)=$$GETNAME^VEFACSP1(DUZ)
	. S %session.Data("DUZ",1)=DUZ
	. D ##class(VEFA.AlertCache).FillGrid()
]]></Implementation>
</Method>

<Method name="LoginKBEditor">
<Description>
Authenticate Access/Verify codes, Login to VistA and if successful login,
fill Web Page with Alert Categories and Alert Types</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Q:'..GetAccessVerifyCodes()
	;
	N ACCESS S ACCESS=(%session.Data("access",1))
	S ACCESS=..Decrypt(ACCESS)
	N VERIFY S VERIFY=(%session.Data("verify",1))
	S VERIFY=..Decrypt(VERIFY)
	;	
	D ##class(VEFA.Login).Env()
	N DUZ,MSG S DUZ=$$GETDUZ^VEFACSP1(ACCESS,VERIFY,.MSG)
	;
	I 'DUZ D ..AccessError("kbeditor.csp",MSG)
	I DUZ D
	. N HASKBKEY S HASKBKEY=$$HASKBKEY^VEFAALR5(DUZ)
	. I HASKBKEY D
	. . S %session.Data("login",1)=2
	. . S %session.Data("username",1)=$$GETNAME^VEFACSP1(DUZ)
	. . S %session.Data("DUZ",1)=DUZ
	. . D ##class(VEFA.KBEditorMain).FillGrids()
	. I 'HASKBKEY D
	. . W "<script>"
	. . W "$('#form1').hide();"
	. . W "alert('Security Key is required to access KB Editor!');"
	. . W "window.location = 'kbeditor.csp';"
	. . W "</script>"
]]></Implementation>
</Method>

<Method name="GetAccessVerifyCodes">
<Description>
Check if the session contains access/verify codes, this prevents user avoiding Login Page</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	N OK S OK=0
	I $D(%session.Data("access",1)),$D(%session.Data("verify",1)) S OK=1
	D:'OK ..AccessError("","Not a Valid ACCESS CODE/VERIFY CODE pair.")
	QUIT OK
]]></Implementation>
</Method>

<Method name="KillSession">
<Description>
Kill Session upon logoff</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	K %session.Data
]]></Implementation>
</Method>

<Method name="AccessError">
<Description>
Show page with Access error - called by login web page</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>CSP,MSG</FormalSpec>
<Implementation><![CDATA[
	W "<script>"
	W "$('#form1').hide();"
	W "alert('"_MSG_"');"
	I CSP="" W "window.close();"
	I CSP'="" W "window.location = '",CSP,"';"
	W "</script>"
]]></Implementation>
</Method>

<Method name="ShowEnv">
<Description>
Show Local VistA Environment variables - called by login web page</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	D ..Env()
	W "<script>"
	N VER S VER="Version: 1.1.0 Build 20140326.1"
	N ENV S ENV="[ VistA Server: "_%session.Data("server",1)_" ]"
	S ENV=ENV_" [ UCI: "_%session.Data("UCI",1)_" ]"
	S ENV=ENV_" [ Volume: "_%session.Data("volume",1)_" ]"
	S ENV=ENV_" [ Production Account: "_$s(%session.Data("production",1):"Yes",1:"No")_" ]"
	W "   $('#ver').text('"_VER_"');"
	W "   $('#env').text('"_ENV_"');"
	W "</script>"
]]></Implementation>
</Method>

<Method name="Env">
<Description>
Get Local VistA Environment variables and save into session</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	N SERVER,VOLBOX,UCI,PROD
	D GETENV^VEFACSP1(.SERVER,.VOLBOX,.UCI,.PROD) ;get environment vars
	S %session.Data("server",1)=SERVER
	S %session.Data("volume",1)=VOLBOX
	S %session.Data("UCI",1)=UCI
	S %session.Data("production",1)=PROD
]]></Implementation>
</Method>

<Method name="quote">
<Description>
Transform string with the equivalent HTML string</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>STR:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Q $$QUOTE^VEFACSP1(STR)
]]></Implementation>
</Method>

<Method name="InvalidPage">
<Description>
Check if user CAP page request is valid. This prevents user avoiding login page</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	N INVALID S INVALID=0
	N LOGIN S LOGIN=$D(%session.Data("login",1))
	;
	I LOGIN<1 D
	. W "<script>"
	. W "alert('Invalid Page!');"
	. W "window.close();"
	. W "</script>"
	. S INVALID=1
	;	
	Q INVALID
]]></Implementation>
</Method>

<Method name="DisplayResult">
<Description>
Display Confirmation dialog after save</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SUCCESS:%Boolean,MSG:%String</FormalSpec>
<Implementation><![CDATA[
	W "<script>"
	W "$(function () {"
	W "$('#savedialog').text('",..quote(MSG),"');"
	W:SUCCESS "successDlg();"
	W:'SUCCESS "failDlg();"
	W "});"
	W "</script>"
]]></Implementation>
</Method>

<Method name="SetCookie">
<Description>
Dynamically set cookie </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>COOKIE,VALUE</FormalSpec>
<Implementation><![CDATA[
	W "<script>"
	W "$.cookie('",COOKIE,"','",VALUE,"')"
	W "</script>"
]]></Implementation>
</Method>

<Method name="Selector">
<Description>
Get name values of a FILE and fill select options </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>FILE:%String,ELEMENT:%String</FormalSpec>
<Implementation><![CDATA[
	N NAMES D GETNAMES^VEFACSP1(.NAMES,FILE)
	D ..FillOptions(.NAMES,ELEMENT)
]]></Implementation>
</Method>

<Method name="FillOptions">
<Description>
Fill select options on HTML element</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>NAMES,ELEMENT:%String</FormalSpec>
<Implementation><![CDATA[
	N NAME S NAME=""
	;	
	F  S NAME=$O(NAMES(NAME)) Q:NAME=""  D
	. W "var sel = $('",ELEMENT,"');"
	. W "var temp = new Option('",NAME,"','",NAME,"');"
	. W "sel[0].options[sel[0].options.length] = temp;"
]]></Implementation>
</Method>
</Class>
</Export>
